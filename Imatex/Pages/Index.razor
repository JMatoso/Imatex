@page "/"

<PageTitle>Image To Text</PageTitle>
<MudText Typo="Typo.h4" Class="text-center py-5">Image To Text</MudText>

<MudStack Class="w-100">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   AppendMultipleFiles
                   Accept="@ExtensionsOptions.GetAllowedImageExtensions()"
                   MaximumFileCount="@ExtensionsOptions.MaxFileCount"
                   OnFilesChanged="OnInputFileChanged"
                   Hidden="@false"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                   InputStyle="opacity:0"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="150px"
                       Outlined="true"
                       Class="@_dragClass">
                 <MudText Typo="Typo.subtitle1">
                     Drag and drop files here or click
                 </MudText>
                @foreach (var name in _imageFiles.Select(x => x.imageName))
                {
                    <MudChip Color="Color.Dark" Text="@name" />
                }
            </MudPaper>
            <MudPaper Class="a-4 align-start d-flex" Elevation="0" Style="background-color: transparent;" Outlined="false">
                <div class="row w-100">
                    <div class="col-md-6">
                        <MudPaper Class="py-3" Elevation="0" Style="background-color: transparent;">
                            <MudText Typo="Typo.body2" Color="Color.Surface">
                                Allowed formats: @ExtensionsOptions.GetAllowedImageExtensions()
                            </MudText>
                            <MudText Typo="Typo.body2" Color="Color.Surface">
                                Max size: @ExtensionsOptions.MaxFileSize.Bytes()
                            </MudText>
                        </MudPaper>
                    </div>
                    <div class="col-md-6">
                        <MudToolBar DisableGutters="true" Class="relative d-flex justify-end gap-4 z-30">
                            <MudTooltip Text="Open Files">
                                <MudButton HtmlTag="label"
                                           Color="Color.Primary"
                                           for="@context.Id"
                                           Variant="Variant.Filled">
                                    Open
                                </MudButton>
                            </MudTooltip>
                            <MudTooltip Text="Extract Text From Images">
                                <MudButton OnClick="@UploadAsync"
                                           Color="Color.Primary"
                                           Disabled="@(!_imageFiles.Any() || _loading)"
                                           Variant="Variant.Filled">
                                    @if (_loading)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                        <MudText Class="ms-2 text-uppercase">Processing</MudText>
                                    }
                                    else
                                    {
                                        <MudText Class="text-uppercase">Load</MudText>
                                    }
                                </MudButton>
                            </MudTooltip>
                            <MudTooltip Text="Clear Form">
                                <MudButton OnClick="@Clear"
                                           Color="Color.Error"
                                           Disabled="@(!_imageFiles.Any())"
                                           Variant="Variant.Filled">
                                    Clear
                                </MudButton>
                            </MudTooltip>
                        </MudToolBar>
                    </div>
                </div>
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
</MudStack>

@if(_loading)
{
    for(int i = 0; i < _imageFiles.Count; i++)
    {
        <MudSkeleton Animation="Animation.Wave" Height="75px" Style="my-4" />
    }
}

@foreach(var extractedText in _extractedTexts.OrderByDescending(x => x.DateIssued))
{
    <MudPaper Elevation="25" Class="pa-4 my-4">
        <MudPaper Class="align-start d-flex" Elevation="0" Style="background-color: transparent;" Outlined="false">
            <MudText Typo="Typo.body2" Class="py-3">
                Confidence: @extractedText.Confidence
            </MudText>
            <MudSpacer />
            <MudIconButton OnClick="async () => await CopyToClipboardAsync(extractedText.Text)" Icon="@Icons.Material.Filled.ContentCopy" aria-label="Copy to clipboard"></MudIconButton>
        </MudPaper>
        <MudText Typo="Typo.body1">
            @extractedText.Text
        </MudText>
    </MudPaper>
}

@inject ILogger<Index> Logger
@inject IOcrService Engine

@code {
    private bool _loading = false;
    private string _dragClass = DefaultDragClass;
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";

    private List<ExtractedText> _extractedTexts = new();
    private readonly List<(IBrowserFile file, string imageName)> _imageFiles = new();

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();

        if(_imageFiles.Count >= ExtensionsOptions.MaxFileCount)
        {
            Snackbar.Add($"You can only upload {ExtensionsOptions.MaxFileCount} files at a time.");
            return;
        }

        foreach (var file in e.GetMultipleFiles())
        {
            if(!ExtensionsOptions.IsAllowedImageExtension(Path.GetExtension(file.Name)))
            {
                Snackbar.Add($"The file {file.Name} is not allowed.", Severity.Warning);
                continue;
            }

            _imageFiles.Add((file, file.Name));
        }
    }

    private async Task UploadAsync()
    {
        _loading = true;

        try
        {
            var images = new List<System.Drawing.Bitmap>();

            foreach (var image in _imageFiles)
            {
                using var ms = new MemoryStream();
                await image.file.OpenReadStream(ExtensionsOptions.MaxFileSize).CopyToAsync(ms);
                var bitmap = new System.Drawing.Bitmap(ms);
                images.Add(bitmap);
            }

            _extractedTexts.AddRange(Engine.GetTextFromImages(images.ToArray()));
            Clear();
        }
        catch (OutOfMemoryException)
        {
            Snackbar.Add("Out of memory. Please try again with smaller images.", Severity.Warning);
        }
        catch (Exception e)
        {
            Logger.LogError(e.Message);
            Snackbar.Add("Something went wrong, try again.", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }        
    }

    private void Clear()
    {
        _imageFiles.Clear();
        ClearDragClass();
    }

    private void SetDragClass() => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass() => _dragClass = DefaultDragClass;

    private async Task CopyToClipboardAsync(string text)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        Snackbar.Add("Copied to clipboard.", Severity.Success);
    }
}